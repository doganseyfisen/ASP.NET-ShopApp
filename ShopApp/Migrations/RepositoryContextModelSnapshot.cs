// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace ShopApp.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.Property<int>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Video Games"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Book"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Stationery"
                        });
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OrderShipped")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/1.jpg",
                            ProductName = "GTA V",
                            ProductPrice = 14.98m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/2.jpg",
                            ProductName = "The Witcher 3",
                            ProductPrice = 29.99m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/3.jpg",
                            ProductName = "Celeste",
                            ProductPrice = 10.49m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/4.jpg",
                            ProductName = "Paper, Please",
                            ProductPrice = 9.99m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/5.jpg",
                            ProductName = "Don't Starve",
                            ProductPrice = 3.29m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            ProductDescription = "",
                            ProductImageUrl = "/images/6.jpg",
                            ProductName = "The Brothers Karamazov",
                            ProductPrice = 19.95m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            ProductDescription = "",
                            ProductImageUrl = "/images/7.jpg",
                            ProductName = "Lamy Fountain Pen",
                            ProductPrice = 25.35m,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            ProductDescription = "",
                            ProductImageUrl = "/images/5.jpg",
                            ProductName = "Don't Starve",
                            ProductPrice = 1.67m,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            ProductDescription = "",
                            ProductImageUrl = "/images/6.jpg",
                            ProductName = "The Brothers Karamazov",
                            ProductPrice = 17.42m,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            ProductDescription = "",
                            ProductImageUrl = "/images/7.jpg",
                            ProductName = "Lamy Fountain Pen",
                            ProductPrice = 34.35m,
                            ShowCase = true
                        });
                });

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.HasOne("Entities.Models.Order", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
